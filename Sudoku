import os
#import colorama
#from colorama import Fore
'''
hardest
8 0 0 0 0 0 0 0 0
0 0 3 6 0 0 0 0 0
0 7 0 0 9 0 2 0 0
0 5 0 0 0 7 0 0 0
0 0 0 0 4 5 7 0 0
0 0 0 1 0 0 0 3 0
0 0 1 0 0 0 0 6 8
0 0 8 5 0 0 0 1 0
0 9 0 0 0 0 4 0 0

difficult
0 6 5 0 0 0 0 1 9
0 0 3 0 0 0 0 0 6
0 0 0 0 0 3 0 0 0
0 0 0 0 0 0 0 4 0
1 0 0 0 3 0 0 0 7
0 7 0 5 2 6 0 0 0
0 8 0 0 0 0 9 7 0
0 3 0 0 5 0 2 0 0
9 1 0 6 0 4 0 0 0
difficult
0 1 7 3 0 8 0 0 0
3 0 0 0 4 0 0 0 0
0 9 0 0 0 1 4 0 0
1 2 0 0 0 0 0 6 0
0 0 0 9 0 3 0 0 0
0 7 0 0 0 0 0 3 1
0 0 9 2 0 0 0 1 0
0 0 0 0 6 0 0 0 7
0 0 0 1 0 5 8 4 0
easy
0 9 8 6 4 1 0 3 7
0 0 7 8 0 0 9 4 6
0 3 6 0 0 9 8 2 0
8 5 9 2 3 6 1 7 0
0 0 0 0 9 8 3 5 2
3 0 0 1 0 7 6 9 8
0 6 0 0 1 0 4 0 5
9 0 5 7 6 4 0 1 0
0 0 4 3 8 5 0 0 9
easy
1 0 6 0 7 8 0 3 0
0 5 7 3 4 9 0 6 2
2 9 3 6 0 5 0 0 7
0 0 0 8 0 1 6 0 4
4 6 1 0 0 0 2 8 9
5 8 0 0 6 4 3 0 0
7 3 4 1 9 6 5 0 8
6 1 8 7 0 2 4 9 3
0 0 0 0 8 0 0 1 0


0 0 0 0 0 0 0 0 0
'''
List=[1,2,3,4,5,6,7,8,9]
L=[]
Llist=[]
Tl=[1,2,3,4,5,6,7,8,9]
'''L= [
[0, 1, 7, 3, 0, 8, 0, 0, 0],
[3, 0, 0, 0, 4, 0, 0, 0, 0],
[0, 9, 0, 0, 0, 1, 4, 0, 0],
[1, 2, 0, 0, 0, 0, 0, 6, 0],
[0, 0, 0, 9, 0, 3, 0, 0, 0],
[0, 7, 0, 0, 0, 0, 0, 3, 1],
[0, 0, 9, 2, 0, 0, 0, 1, 0],
[0, 0, 0, 0, 6, 0, 0, 0, 7],
[0, 0, 0, 1, 0, 5, 8, 4, 0]]'''
Lindex = []
Lposs =  []
for i in range(9):
    Lindex.append([0,0,0,0,0,0,0,0,0])
    Lposs.append([0,0,0,0,0,0,0,0,0])
'''L=[
[1, 0, 6, 0, 7, 8, 0, 3, 0],
[0, 5, 7, 3, 4, 9, 0, 6, 2],
[2, 9, 3, 6, 0, 5, 0, 0, 7],
[0, 0, 0, 8, 0, 1, 6, 0, 4],
[4, 6, 1, 0, 0, 0, 2, 8, 9],
[5, 8, 0, 0, 6, 4, 3, 0, 0],
[7, 3, 4, 1, 9, 6, 5, 0, 8],
[6, 1, 8, 7, 0, 2, 4, 9, 3],
[0, 0, 0, 0, 8, 0, 0, 1, 0]]
Lt=[
[1, 0, 6, 0, 7, 8, 0, 3, 0],
[0, 5, 7, 3, 4, 9, 0, 6, 2],
[2, 9, 3, 6, 0, 5, 0, 0, 7],
[0, 0, 0, 8, 0, 1, 6, 0, 4],
[4, 6, 1, 0, 0, 0, 2, 8, 9],
[5, 8, 0, 0, 6, 4, 3, 0, 0],
[7, 3, 4, 1, 9, 6, 5, 0, 8],
[6, 1, 8, 7, 0, 2, 4, 9, 3],
[0, 0, 0, 0, 8, 0, 0, 1, 0]]
'''
TotCountOfSinglePossibilities=[1]
zeroCount=0
def ItemValidation(i,j,k):
    if Lposs[i][:j].count(Lposs[i][j])> 0:
        Lposs[i][j]='*'
        return False
    else:
        for ll in range(i):
            if L[ll][j]==0:
                if k>len(Llist[ll][j]):
                    #print('Unexpectedly K is out of Range')
                    continue
                elif Lposs[i][j] == Lposs[ll][j] and ll !=i :
                    Lposs[i][j]='*'
                    return False
        if i < 3: ist = 0; istp = i
        elif i<6: ist = 3; istp = i
        else    : ist = 6; istp = i
        if j < 3: jst = 0; jstp = 3
        elif j<6: jst = 3; jstp = 6
        else    : jst = 6; jstp = 9

        for ii in range(ist,istp):
            for jj in range(jst,jstp):
                if ii==i and jj>j:
                    break
                if L[i][j]==0 and ii != i and jj !=j:
                    if Lposs[i][j] == Lposs[ii][jj]: #removing from the same row
                        flag=1
                        Lposs[i][j]='*'
                        #print('Square Check failed', Lposs[ii][jj],i,j)
                        return False
                

    return True
''' Removing the not possible items for the list of possibilities Llist.'''
def removeItem(i,j):
    for k in range(9):
        if L[i][j] in Llist[i][k]: #removing from the same row
            Llist[i][k].remove(L[i][j])
            if len(Llist[i][k]) == 1 :
                TotCountOfSinglePossibilities[0] = TotCountOfSinglePossibilities[0] +1

        if L[i][j] in Llist[k][j]: #removing from the same coloumn
            Llist[k][j].remove(L[i][j]) 
            if len(Llist[k][j]) == 1 :
                TotCountOfSinglePossibilities[0] = TotCountOfSinglePossibilities[0] +1
        # Checking in the 3X3 square
        # below finding the index's region of sqrs
        if i < 3:
            ist=0
            istp=3
        elif i<6:
            ist =3
            istp=6
        else:
            ist=6
            istp=9
        if j < 3:
            jst=0
            jstp=3
        elif j<6:
            jst =3
            jstp=6
        else:
            jst=6
            jstp=9
        for ii in range(ist,istp):
            for jj in range(jst,jstp):
                if L[i][j] in Llist[ii][jj]: #removing from the same row
                    Llist[ii][jj].remove(L[i][j])                    
                    if len(Llist[ii][jj]) == 1:
                        TotCountOfSinglePossibilities[0] = TotCountOfSinglePossibilities[0] +1
def OnPossibilities(i,j,flag):
    if flag==1: #back track
        while L[i][j]!=0:
            if j>0:
                j=j-1
            elif j==0 and i>0:
                i=i-1
                j=8
            else:
                print("This Sudoku couldn't be solved. Check the Inputs")
                exit()
        if Lindex[i][j]==len(Llist[i][j])-1:
            Lposs[i][j]='#'
            Lindex[i][j]=-1
            if j>0:
                j=j-1
            elif j==0 and i>0:
                i=i-1
                j=8
            else:
                print("This Sudoku couldn't be solved. Check the Inputs")
                exit()
            i,j=OnPossibilities(i,j,flag)
            return i,j
        else:
            Lindex[i][j]=Lindex[i][j]+1
            Lposs[i][j]=Llist[i][j][Lindex[i][j]]
    for k in range(Lindex[i][j],len(Llist[i][j])):
        if k<0:
            continue
        Lposs[i][j] = Llist[i][j][k]
        Lindex[i][j]=k
        flag = 0
        if ItemValidation(i,j,k):
            flag=0
            return i,j
    Lposs[i][j]= '*'
    Lindex[i][j]=-1
    #print('<<<<<<<<<<<<<<  BACK TRACKING &&&&&&&&&&&&&&&&')
    if j>0:
        j=j-1
    elif j==0 and i>0:
        i=i-1
        j=8
    i,j=OnPossibilities(i,j,1)
    return i,j
print("Starts Here")
TotCountOfSinglePossibilities[0]=1
#Input For the Suduko
for i in range(9):
    K=[]
    K=list(map(int,input().split(' ')))
    L.append(K)
'''
for iiii in range(9):
    for jjjj in range(9):
        if L[iiii][jjjj]==0:
            print(Lposs[iiii][jjjj],end=' ')
        else:
            print(L[iiii][jjjj],end=' ')
'''
zeroCount0=0 # total zeros in the given input list
for i in range(9):
    zeroCount0 = zeroCount0+ L[i].count(0)

for i in range(9):
    k=[]
    for j in range(9):    
        if L[i][j]!=0:
            k.append([])
        else:
            k.append([1,2,3,4,5,6,7,8,9])
    Llist.append(k)
for i in range(9):
    for j in range(9):
        if L[i][j]!=0:
            removeItem(i,j)
        else:
            zeroCount = zeroCount+ 1
iii=0
while TotCountOfSinglePossibilities[0]>0 and zeroCount>0:
    iii=iii+1
    for i in range(9):
        for j in range(9):
            if L[i][j]==0 and len(Llist[i][j])==1:
                L[i][j]=Llist[i][j][0]
                zeroCount = zeroCount-1
                #Llist[i][j].remove(Llist[i][j][0])
                removeItem(i,j)
                TotCountOfSinglePossibilities[0] = TotCountOfSinglePossibilities[0] -1
        zeroCount1=0
    for i in range(9):
        zeroCount1 = zeroCount1+ L[i].count(0)
    zeroOld=zeroCount0
    if zeroCount1 == zeroOld:
        zeroOld = zeroCount1
        break
    if iii > 20:
        break
i=0
j=0
#print(Lindex)
checkL=[0,'*','#']
while i <9:
    j=0
    while j<9:
        if L[i][j]==0:
            Lposs[i][j]=='^'
            #print('+++++++++++++++++++++++++++++Posibilities i,j',i,j)
            i,j=OnPossibilities(i,j,0)
            #print('Running...')
            #time.sleep(0.001)
            '''
            os.system('cls')
            for iiii in range(9):
                for jjjj in range(9):
                    if L[iiii][jjjj]==0:
                        if Lposs[iiii][jjjj]in checkL:
                            print("\033[1;30m",end='')
                        else:
                            print("\033[1;32m",end='')
                        print(Lposs[iiii][jjjj],end=' ')
                    else:
                        print("\033[1;31m",end='')
                        print(L[iiii][jjjj],end=' ')

                print('\n')'''
        j=j+1
    i=i+1
os.system('cls')
for i in range(9):
    for j in range(9):
        if L[i][j]==0:
            print("\033[1;32m",end='')
            print(Lposs[i][j],end=' ')
            L[i][j]=Lposs[i][j]
        else:
            print("\033[1;31m",end='')
            print(L[i][j],end=' ')
    print('')
#
#for i in range(9):
#    print(L[i])
print("\033[1;32m Done uh !!")

'''
    Purely Coded by Nithya Narayanan with ❤️.
    
'''
